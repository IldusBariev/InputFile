@using BlazorApp2.Request
@using System.Net
@page "/afterAuthoPage"

<PageTitle>AfterAuthoPage</PageTitle>

<div class="news-add-wrapper">


    <div class="work-from-news">


        <div class="news-add-container">

            <EditForm Model="newsAdd"
                      OnValidSubmit="AddNewsAsync">
                <DataAnnotationsValidator />


                <p>Загловок новости</p>
                <InputTextArea class="news-title"
                               @bind-Value="newsAdd.Title"
                               placeholder="Загаловок"
                               rows="3" />
                <ValidationMessage For="() => newsAdd.Title" />

                <p>Содеражние</p>
                <InputTextArea class="news-description"
                               max-heigth="15%"
                               @bind-Value="newsAdd.Description"
                               placeholder="Описание"
                               rows="20" />
                <ValidationMessage For="() => newsAdd.Description" />

                <p>Фотография</p>
                <InputFile OnChange="OnInputFileChange" />

                <button type="submit"
                        class="authbutn">
                    Добавить новость
                </button>

            </EditForm>

        </div>

        <div class="empty-div"></div>

        <div class="news-view-container">
            <h2>Примерный вид</h2>
            <div class="news-main-views">



                <div class="news-view-block">

                    @if (imageBase64 != null)
                    {
                        <div class="news-image-container">
                            <img src="@imageBase64">
                        </div>
                    }

                    <div class="news-main-container">

                        <h3>@newsAdd.Title</h3>

                        <p>@newsAdd.Description</p>

                    </div>

                </div>

            </div>
        </div>

    </div>

    <p>@Message</p>
</div>

@code {
    [Inject]
    private HttpClient HttpClient { get; set; }

    private string Message;
    private NewsAdd newsAdd = new();

    private string? imageBase64;
    private IBrowserFile? selectedFile;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;
        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 512000);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            imageBase64 = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

            StateHasChanged();// Force a re-render
        }
        else
        {
            imageBase64 = null; // Clear the image
        }
        return;
    }

    // Добавление новостей
    private async Task AddNewsAsync()
    {
        try
        {
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(newsAdd.Title));
            content.Add(new StringContent(newsAdd.Description));


            if (selectedFile != null)
            {
                var stream = selectedFile.OpenReadStream();
                var streamContent = new StreamContent(stream);
                content.Add(streamContent, "Image", selectedFile.Name);
            }

            var response = await HttpClient.PostAsJsonAsync("CreateNews", content);

            if (response.IsSuccessStatusCode)
            {
                Message = "Новость успешно добавлена";
                return;
            }



        }
        catch (HttpRequestException e)
        {
            Message = $"Error: {e.Message}";
        }
        catch (Exception e)
        {
            Message = $"Error: {e.Message}";
        }
    }

}
